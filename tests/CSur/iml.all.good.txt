let A = 
let hex1 = BN_bn2hex(mod_exp(<{msg: <{msg1: <{id: i0; nonce: RAND_bytes()<16>}>}>; msg_type: i1}>, BN_hex2bn(ztp(bob_pub_key())), BN_hex2bn(ztp(bob_mod_key())))) in
let msg1 = hex1{0, 128} in
out(c, msg1);
let var1 = ztp(RAND_bytes()<16>) in
in(c, msg2<128>);
let hex2 = msg2|i0 in
let bignum1 = mod_exp(BN_hex2bn(ztp(hex2)), BN_hex2bn(ztp(alice_priv_key())), BN_hex2bn(ztp(alice_mod_key()))) in
let var2 = bignum1{field_offset(msg) + field_offset(msg2) + field_offset(nonce1), 16} in
let var3 = ztp(var2) in
if var3 = var1 then 
let var4 = bignum1{field_offset(msg) + field_offset(msg2) + field_offset(nonce2), 16} in
event alice_accept(RAND_bytes()<16>, var4);
let hex3 = BN_bn2hex(mod_exp(<{msg: <{msg3: <{nonce: mod_exp(BN_hex2bn(ztp(read()<128>|i0)), BN_hex2bn(ztp(alice_priv_key())), BN_hex2bn(ztp(alice_mod_key()))){field_offset(msg) + field_offset(msg2) + field_offset(nonce2), 16}}>}>; msg_type: i3}>, BN_hex2bn(ztp(bob_pub_key())), BN_hex2bn(ztp(bob_mod_key())))) in
let msg3 = hex3{0, 128} in
out(c, msg3);

let B = 
let hex1 = BN_bn2hex(mod_exp(<{msg: <{msg2: <{nonce1: mod_exp(BN_hex2bn(ztp(read()<128>|i0)), BN_hex2bn(ztp(bob_priv_key())), BN_hex2bn(ztp(bob_mod_key()))){field_offset(msg) + field_offset(msg1) + field_offset(nonce), 16}; nonce2: RAND_bytes()<16>}>}>; msg_type: i2}>, BN_hex2bn(ztp(alice_pub_key())), BN_hex2bn(ztp(alice_mod_key())))) in
let msg1 = hex1{0, 128} in
out(c, msg1);
let var1 = ztp(RAND_bytes()<16>) in
in(c, msg2<128>);
let hex2 = msg2|i0 in
let bignum1 = mod_exp(BN_hex2bn(ztp(hex2)), BN_hex2bn(ztp(bob_priv_key())), BN_hex2bn(ztp(bob_mod_key()))) in
let var2 = bignum1{field_offset(msg) + field_offset(msg3) + field_offset(nonce), 16} in
let var3 = ztp(var2) in
if var3 = var1 then 
in(c, msg3<128>);
let hex3 = msg3|i0 in
let bignum2 = mod_exp(BN_hex2bn(ztp(hex3)), BN_hex2bn(ztp(bob_priv_key())), BN_hex2bn(ztp(bob_mod_key()))) in
let var4 = bignum2{field_offset(msg) + field_offset(msg1) + field_offset(nonce), 16} in
event bob_accept(var4, RAND_bytes()<16>);

