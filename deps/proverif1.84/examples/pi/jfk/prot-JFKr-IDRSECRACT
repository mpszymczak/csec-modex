(*************************************************************
 *                                                           *
 *       Cryptographic protocol verifier                     *
 *                                                           *
 *       Bruno Blanchet and Xavier Allamigeon                *
 *                                                           *
 *       Copyright (C) INRIA, LIENS, MPII 2000-2009          *
 *                                                           *
 *************************************************************)

(*

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details (in file LICENSE).

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

*)
(* JFKr *)

param redundantHypElim = beginOnly.

(* Exponential and Diffie-Hellman *)

data g/0.
fun exp/2.
equation exp(exp(g,y),z) = exp(exp(g,z),y).

(* Signature *)

fun S/2.
fun Pk/1.
data true/0.
fun V/3.
fun RecoverKey/1.
fun RecoverText/1.
equation V(S(k,v), Pk(k),v) = true.
equation RecoverKey(S(k,v)) = Pk(k). (* For the attacker *)
equation RecoverText(S(k,v)) = v.    (* For the attacker *)

(* Shared-key encryption *)

fun E/2.
fun D/2.
equation D(k,E(k,v)) = v.

(* Keyed hash function *)

fun H/2.

(* Sets *)

data consset/2.
data emptyset/0.
pred member/2.
clauses
  member:x,consset(x,y);
  member:x,y -> member:x,consset(z,y).

(* Tags *)

data tagE/0. data tagA/0. data tagV/0.

(* Constructors for JFK's formatted messages
   Selectors are implicit when using "data" *)

data cons1/2. data cons2/5. data cons3/7. data cons4/2.

(* More constants *)

data constI/0. data constR/0. data saR/0.

(* Free names *)

free c. (* Public channel *)
free pub, getprinc, getexponential, grpinfoR, channelSIAR1, channelSIAR2.

(* Queries: properties to prove *)

(* Correspondence assertions *)







(* Secrecy *)



(* Identity protection.
   The predicate member: must be removed, because it is not supported
   for observational equivalence proofs. So we use a version without cache.
   Only compliant principals are allowed to connect to R. *)


  (* Identity protection for R against active adversaries *)
  private free kRminus0, kRminus3, kRminus1, kRminus2.
  noninterf kRminus0 among (kRminus1, kRminus2), 
            kRminus3 among (kRminus1, kRminus2).
  not kRminus1.
  not kRminus2.
  



(* Secrecy assumptions *)

not kAminus phase 0.

not d.


(* Initiator 
   The process processI corresponds to I^A in the figure. *)

let processI =
  !
  in(exponent, (dI, xI));
  !
  in(init, (IDRp, saI));    (* Init message *)
  event init(init, IDRp, saI); 
  new NI; 
  event mess1(IDA, NI, xI, init, IDRp, saI);
  out(c, cons1(NI, xI));
  in(c, cons2(=NI, NR, xR, grpinfoR, tR));
  event mess2rec(IDA, NI, NR, xR, grpinfoR, tR, xI, IDRp, saI);
  event enddosi(IDA, NI);
  let h = exp(xR, dI) in
  let Ka = H(h, (NI, NR, tagA)) in
  let Ke = H(h, (NI, NR, tagE)) in
  let Kv = H(h, (NI, NR, tagV)) in
  let sI = S(kAminus, (NI, NR, xI, xR, grpinfoR)) in
  let eI = E(Ke, (IDA, IDRp, saI, sI)) in
  let hI = H(Ka, (constI, eI)) in
  event mess3(IDA, NI, NR, xI, xR, tR, eI, hI, grpinfoR, IDRp, saI, Kv);
  out(c, cons3(NI, NR, xI, xR, tR, eI, hI));
  in(c, cons4(eR, hR));
  if H(Ka, (constR, eR)) = hR then
  let (IDRl, saR, sR) = D(Ke, eR) in
  if V(sR, IDRl, (NI, NR, xI, xR)) = true then 
  event mess4rec(IDA, eR, hR, connect, IDRl, IDRp, saI, saR, Kv);
  event connect(connect, IDRl, IDRp, saI, saR, Kv);
  out(connect, (IDRl, IDRp, saI, saR, Kv));
  (

    (  

      0
    )
  ).

(* Responder
   The process processR corresponds to R^A in the figure. *)



let processR =
  new KR;
  !
  in(exponent, (dR, xR));
  !
  in(c, cons1(NI, xI));
  event mess1rec(IDA, NI, xI);
  new NR;
  new tR;
  event mess2(IDA, NI, NR, xI, xR, grpinfoR, tR);
  out(c, cons2(NI, NR, xR, grpinfoR, tR));
  new l;
  (
    (
    !
    in(c, cons3(=NI,=NR,xI,=xR,=tR,eI,hI));
    out(l, (xI,eI,hI))
    )
  |
    (
    in(l, (xI,eI,hI));
    event mess3rec(IDA, NI, NR, xI, xR, tR, eI, hI);
    processR4
    )
  ).



let processR4 = 
  event enddosr(IDA, NI, NR);
  let h = exp(xI,dR) in
  let Ka = H(h, (NI, NR, tagA)) in
  let Ke = H(h, (NI, NR, tagE)) in
  let Kv = H(h, (NI, NR, tagV)) in
  if H(Ka, (constI, eI)) = hI then
  let (IDIl, IDRp, saI, sI) = D(Ke,eI) in
(* Only honest hosts are allowed to connect to R in this case *)
  in(honestC, =IDIl);

  if V(sI, IDIl, (NI, NR, xI, xR, grpinfoR)) = true then
  event accept(accept, IDIl, IDRp, saI, saR, Kv);
  out(accept, (IDIl, IDRp, saI, saR, Kv));
  (

    (
      let sR = S(kAminus, (NI, NR, xI, xR)) in
      let eR = E(Ke, (IDA, saR, sR)) in
      let hR = H(Ka, (constR, eR)) in
      event mess4(IDA, IDIl, eR, hR, NI, NR, xI, xR, tR, eI, hI);
      out(c, cons4(eR, hR));

      0
    )
  ).


(* Whole JFK system. *)

(* Version for identity protection with active adversaries *)

process
  new exponent;
  ( ! new d; let x = exp(g,d) in out(getexponential, x); ! out(exponent, (d,x)) )
  |
  new initI;     (* private channel used to launch principals playing role I *)
  new initR;     (* private channel used to launch principals playing role R *)
  new honestC;   (* private channel used to simulate the set C of honest principals *)
  let IDR1 = Pk(kRminus1) in
  let IDR2 = Pk(kRminus2) in
  out(pub, IDR1);
  out(pub, IDR2);
  (
    ( ! out(honestC, IDR1) )
  | 
    ( ! out(honestC, IDR2) )
  |
    (
      (* Create principal playing role R, with secret key kRminus0 *)
      in(channelSIAR1, SIA0);
      let IDR0 = Pk(kRminus0) in
      new accept0;
      (
        (! in(accept0, x))
      | out(initR, (kRminus0, IDR0, accept0, SIA0))
      )
    )
  |
    (
      (* Create principal playing role R, with secret key kRminus3 *)
      in(channelSIAR2, SIA3);
      let IDR3 = Pk(kRminus3) in
      new accept3;
      (
        (! in(accept3, x))
      | out(initR, (kRminus3, IDR3, accept3, SIA3))
      )
    )
  |
    (
      !
      new kAminus;
      let IDA = Pk(kAminus) in
      new connect; new accept; new init; new channelSIA;
      out(getprinc, (IDA, init, channelSIA));
      in(channelSIA, SIA);
      (
        (! in(accept, x))
      | (! in(connect, x))
      | (! out(honestC, IDA))
      | out(initI, (kAminus, IDA, init, connect))
      | out(initR, (kAminus, IDA, accept, SIA))
      )
    )
  |
    (! in(initI, (kAminus, IDA, init, connect)); processI) 
  | 
    (! in(initR, (kAminus, IDA, accept, SIA)); processR) 
  )



